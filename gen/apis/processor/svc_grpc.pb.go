// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/processor/svc.proto

package processor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProcessorService_Process_FullMethodName       = "/apis.processor.ProcessorService/Process"
	ProcessorService_ProcessStream_FullMethodName = "/apis.processor.ProcessorService/ProcessStream"
	ProcessorService_Consume_FullMethodName       = "/apis.processor.ProcessorService/Consume"
)

// ProcessorServiceClient is the client API for ProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessorServiceClient interface {
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	ProcessStream(ctx context.Context, opts ...grpc.CallOption) (ProcessorService_ProcessStreamClient, error)
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (ProcessorService_ConsumeClient, error)
}

type processorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorServiceClient(cc grpc.ClientConnInterface) ProcessorServiceClient {
	return &processorServiceClient{cc}
}

func (c *processorServiceClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, ProcessorService_Process_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorServiceClient) ProcessStream(ctx context.Context, opts ...grpc.CallOption) (ProcessorService_ProcessStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessorService_ServiceDesc.Streams[0], ProcessorService_ProcessStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &processorServiceProcessStreamClient{stream}
	return x, nil
}

type ProcessorService_ProcessStreamClient interface {
	Send(*ProcessRequest) error
	Recv() (*ProcessResponse, error)
	grpc.ClientStream
}

type processorServiceProcessStreamClient struct {
	grpc.ClientStream
}

func (x *processorServiceProcessStreamClient) Send(m *ProcessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorServiceProcessStreamClient) Recv() (*ProcessResponse, error) {
	m := new(ProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorServiceClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (ProcessorService_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessorService_ServiceDesc.Streams[1], ProcessorService_Consume_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &processorServiceConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessorService_ConsumeClient interface {
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type processorServiceConsumeClient struct {
	grpc.ClientStream
}

func (x *processorServiceConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorServiceServer is the server API for ProcessorService service.
// All implementations must embed UnimplementedProcessorServiceServer
// for forward compatibility
type ProcessorServiceServer interface {
	Process(context.Context, *ProcessRequest) (*ProcessResponse, error)
	ProcessStream(ProcessorService_ProcessStreamServer) error
	Consume(*ConsumeRequest, ProcessorService_ConsumeServer) error
	mustEmbedUnimplementedProcessorServiceServer()
}

// UnimplementedProcessorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcessorServiceServer struct {
}

func (UnimplementedProcessorServiceServer) Process(context.Context, *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedProcessorServiceServer) ProcessStream(ProcessorService_ProcessStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStream not implemented")
}
func (UnimplementedProcessorServiceServer) Consume(*ConsumeRequest, ProcessorService_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedProcessorServiceServer) mustEmbedUnimplementedProcessorServiceServer() {}

// UnsafeProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessorServiceServer will
// result in compilation errors.
type UnsafeProcessorServiceServer interface {
	mustEmbedUnimplementedProcessorServiceServer()
}

func RegisterProcessorServiceServer(s grpc.ServiceRegistrar, srv ProcessorServiceServer) {
	s.RegisterService(&ProcessorService_ServiceDesc, srv)
}

func _ProcessorService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessorService_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServiceServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessorService_ProcessStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServiceServer).ProcessStream(&processorServiceProcessStreamServer{stream})
}

type ProcessorService_ProcessStreamServer interface {
	Send(*ProcessResponse) error
	Recv() (*ProcessRequest, error)
	grpc.ServerStream
}

type processorServiceProcessStreamServer struct {
	grpc.ServerStream
}

func (x *processorServiceProcessStreamServer) Send(m *ProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorServiceProcessStreamServer) Recv() (*ProcessRequest, error) {
	m := new(ProcessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProcessorService_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessorServiceServer).Consume(m, &processorServiceConsumeServer{stream})
}

type ProcessorService_ConsumeServer interface {
	Send(*ConsumeResponse) error
	grpc.ServerStream
}

type processorServiceConsumeServer struct {
	grpc.ServerStream
}

func (x *processorServiceConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProcessorService_ServiceDesc is the grpc.ServiceDesc for ProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.processor.ProcessorService",
	HandlerType: (*ProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _ProcessorService_Process_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessStream",
			Handler:       _ProcessorService_ProcessStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Consume",
			Handler:       _ProcessorService_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/processor/svc.proto",
}
