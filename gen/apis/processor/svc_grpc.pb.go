// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/processor/svc.proto

package processor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Processor_Process_FullMethodName       = "/svc.processor.Processor/Process"
	Processor_ProcessStream_FullMethodName = "/svc.processor.Processor/ProcessStream"
	Processor_Consume_FullMethodName       = "/svc.processor.Processor/Consume"
)

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessorClient interface {
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	ProcessStream(ctx context.Context, opts ...grpc.CallOption) (Processor_ProcessStreamClient, error)
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (Processor_ConsumeClient, error)
}

type processorClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorClient(cc grpc.ClientConnInterface) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, Processor_Process_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processorClient) ProcessStream(ctx context.Context, opts ...grpc.CallOption) (Processor_ProcessStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Processor_ServiceDesc.Streams[0], Processor_ProcessStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &processorProcessStreamClient{stream}
	return x, nil
}

type Processor_ProcessStreamClient interface {
	Send(*ProcessRequest) error
	Recv() (*ProcessResponse, error)
	grpc.ClientStream
}

type processorProcessStreamClient struct {
	grpc.ClientStream
}

func (x *processorProcessStreamClient) Send(m *ProcessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorProcessStreamClient) Recv() (*ProcessResponse, error) {
	m := new(ProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processorClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (Processor_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Processor_ServiceDesc.Streams[1], Processor_Consume_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &processorConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Processor_ConsumeClient interface {
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type processorConsumeClient struct {
	grpc.ClientStream
}

func (x *processorConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorServer is the server API for Processor service.
// All implementations must embed UnimplementedProcessorServer
// for forward compatibility
type ProcessorServer interface {
	Process(context.Context, *ProcessRequest) (*ProcessResponse, error)
	ProcessStream(Processor_ProcessStreamServer) error
	Consume(*ConsumeRequest, Processor_ConsumeServer) error
	mustEmbedUnimplementedProcessorServer()
}

// UnimplementedProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedProcessorServer struct {
}

func (UnimplementedProcessorServer) Process(context.Context, *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedProcessorServer) ProcessStream(Processor_ProcessStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStream not implemented")
}
func (UnimplementedProcessorServer) Consume(*ConsumeRequest, Processor_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedProcessorServer) mustEmbedUnimplementedProcessorServer() {}

// UnsafeProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessorServer will
// result in compilation errors.
type UnsafeProcessorServer interface {
	mustEmbedUnimplementedProcessorServer()
}

func RegisterProcessorServer(s grpc.ServiceRegistrar, srv ProcessorServer) {
	s.RegisterService(&Processor_ServiceDesc, srv)
}

func _Processor_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessorServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Processor_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessorServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Processor_ProcessStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServer).ProcessStream(&processorProcessStreamServer{stream})
}

type Processor_ProcessStreamServer interface {
	Send(*ProcessResponse) error
	Recv() (*ProcessRequest, error)
	grpc.ServerStream
}

type processorProcessStreamServer struct {
	grpc.ServerStream
}

func (x *processorProcessStreamServer) Send(m *ProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorProcessStreamServer) Recv() (*ProcessRequest, error) {
	m := new(ProcessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Processor_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessorServer).Consume(m, &processorConsumeServer{stream})
}

type Processor_ConsumeServer interface {
	Send(*ConsumeResponse) error
	grpc.ServerStream
}

type processorConsumeServer struct {
	grpc.ServerStream
}

func (x *processorConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Processor_ServiceDesc is the grpc.ServiceDesc for Processor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Processor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.processor.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _Processor_Process_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessStream",
			Handler:       _Processor_ProcessStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Consume",
			Handler:       _Processor_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/processor/svc.proto",
}
